The Great Package Debate: Where Should Tests Live?

As I sat down with my colleague to discuss our latest project, the conversation quickly turned into a heated debate. The topic? Where should our tests and mocks reside in relation to the code they're testing? My colleague argued that they should be in a separate package, while I was adamant they should be alongside the code. This got me thinking - is it really just a matter of personal preference, or is there a right (or wrong) way to do it?

As developers, we've all been there - pouring over lines of code, trying to ensure they're airtight. Unit testing and code coverage are crucial in this process. But when it comes to organizing our test packages, things get murky. Should we keep them tightly coupled with the code, or separate them out for a cleaner design? In 2022, with testing logic becoming increasingly complex, this question is more relevant than ever. For me, the answer lies in striking a balance between the two. By keeping tests and mocks closely tied to the code, we can ensure our testing is robust and effective. But we also need to consider the impact on our package design. Perhaps the real question is: what's the best way to structure our tests to support our code, not the other way around?