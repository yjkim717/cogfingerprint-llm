It was one of those moments every developer dreads: you’ve followed the instructions, dotted your i’s and crossed your t’s, but the magic just isn’t happening. I was deep into a 2021 project, building a sleek marketing site with NextJS, and I needed dynamic meta tags for SEO—the kind that change based on the page content. I’d read the docs, used `getInitialProps` to fetch data server-side, and wrapped my meta tags in Next’s `<Head>` component. On paper, it should have worked perfectly.

But then I checked the source code. My beautifully crafted meta tags? Nowhere to be found. They only popped into existence after the JavaScript loaded on the client side. It felt like preparing an elaborate dinner, only to realize your guests can’t smell it until they’ve already walked in the door.

That’s when it hit me: NextJS’s Head component, at least back then, didn’t play nice with server-side rendering in this scenario. Even with `getInitialProps` doing its job, those crucial meta tags were being left out of the initial HTML. For search engines and social media crawlers, which often rely on that server-rendered snapshot, my pages were essentially invisible.

It was a humbling reminder that in web development, assumptions can be your worst enemy. I’d assumed that using server-side methods would mean everything in the component tree rendered accordingly. But tools have their quirks, and sometimes the “right” way isn’t obvious until you’ve hit a wall. In the end, digging deeper into NextJS’s behavior—and exploring alternative approaches—taught me more than any straightforward success ever could. It’s in these frustrating, head-scratching moments that we often learn the most.