>Okay, here's a blog post draft inspired by the provided summary, aiming for a conversational tone and storytelling style, set in 2023:

## The Curious Case of the Wandering Value

I've been wrestling with Elixir's pipe operator lately, and it's led me down a surprisingly philosophical rabbit hole. You know, the `|>` – it's usually so elegant, passing values smoothly from one function to the next. But what happens when you're dealing with something a little…unconventional?

I was experimenting with a custom arithmetic function, a bit of a mathematical oddity that didn't quite behave like your standard `+` or `*`. The order of operations *really* mattered.  Suddenly, the standard pipe felt...wrong. It was like values were subtly shifting position, betraying my intended logic.

That's when I started digging into &-functions, those lesser-known beauties. They offer a non-commutative way to chain operations, preserving the intended order. It felt *right*, but also a little…uncommon.  Is it the Elixir way? Or is it a sign that even elegant tools sometimes need a bit of extra finesse to handle the truly quirky corners of our code?  Still pondering... what are your thoughts?
