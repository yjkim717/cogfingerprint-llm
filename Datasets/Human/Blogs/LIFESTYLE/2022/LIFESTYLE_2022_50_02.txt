Year: 2022
Author: prois99
URL: https://www.reddit.com/r/C_Programming/comments/x4y5iq/compiling_c_string_and_strcpy/

Hello, I am currently the book Hacking: Art Of Exploitation, and I have some questions regarding the chapter dedicated to strings in C : They start of explaining strings as an array containing multiple character values: `#include <stdio.h>` `int main()` `{` `char str_a[20];` `str_a[0] = 'H';` `str_a[1] = 'e';` `str_a[2] = 'l';` `str_a[3] = 'l';` `str_a[4] = 'o';` `str_a[5] = ',';` `str_a[6] = ' ';` `str_a[7] = 'w';` `str_a[8] = 'o';` `str_a[9] = 'r';` `str_a[10] = 'l';` `str_a[11] = 'd';` `str_a[12] = '!';` `str_a[13] = '\n';` `str_a[14] = 0;` `printf(str_a);` `}` Before I get to my main question I would like to ask, why I had to add parameter "%s" to the printf function to compile succesfully. Otherwise I would get the error *format not a string literal and no format arguments \[-Wformat-security | 20 | printf(str\_a);.* In the book they compiled successfully without adding this parameter. How come? Now my main concern, the book introduced a function strcpy() , which copies a string from source to destination. The main point of it seems to be, that I do not have to define every byte manually. However, if I type my code like this: `char str[] = "ABCD\n";` `printf("%s", str);` I can get my string printed, without the need to define each byte manually. Now I am concerned why so much emphasis is put on strcpy() Thank a lot in advance:)
