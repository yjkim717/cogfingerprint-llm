Year: 2020
Author: Nuoji
URL: https://www.reddit.com/r/ProgrammingLanguages/comments/gwo212/ideas_on_how_to_break_hygiene/

Let's say we have the following code: func void blurb(Baz *baz) { if (baz) baz.foo(); } Let's say we have a normal (hygienic) macro like this: macro f(x) { if (x) x.f(); } func void blurb(Baz *baz) { @f(baz); } But we want to be really convenient, so we want something unhygienic that pulls `baz` from the outer scope. For example like this: macro g() { if ('baz) 'baz.f(); } func void blurb(Baz *baz) { @g(); } In the above proto-language we assume that `'` breaks hygiene. Starting from this I think it's possible to make it a bit more obvious what's going on by putting things in the parameters. Perhaps like this: macro h(implicit baz) { if (baz) baz.f(); } func void blurb(Baz *baz) { @h(); } Another would be to simply have a type of macro that's always unhygienic. Let's say it's when we suffix things with `!` macro noh!() { if (baz) baz.f(); int i = 0; } func void blurb(Baz *baz) { @noh!(); i = 3; // Expands out of the macro as well. } The `!` method leaves it obvious that something weird is happening at the calling location and the other hides it but puts it in the signature. Mostly I would assume this type of macros is to be used within a very limited scope to reduce repetition and make the code easier to read locally. It's not something I would expect to be used externally or between modules, which makes it different from macros that are to be used more widely. Thoughts? Comparisons with other langs?
