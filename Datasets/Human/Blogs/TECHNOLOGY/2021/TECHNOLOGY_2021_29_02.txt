Year: 2021
Author: Nuoji
URL: https://www.reddit.com/r/C_Programming/comments/pkj0v0/how_useful_would_new_compound_literal_cast_syntax/

I am working on a C-like language (not a superset of C, but very close to C in syntax – see c3-lang.org), and the question of cast / compound literal syntax is like this undead thing that keeps popping up no matter how many times I put it to rest. I personally feel that C cast syntax is a bit unclear – I have to think a bit to remember the precedence. Similarly the cast-style syntax for compound literals feels a bit wordy (+ probably confuses more than one person who sees it for the first time) Given `(Foo) { 1, 2 }` and `(int) y`, C++ already offers quite a bit of alternatives, but the closest to something that could be used for C would be `Foo { 1, 2 }` `Foo(1, 2)` and `int(y)` Ignoring parsing difficulties, I'm mostly focusing on `Foo { 1, 2 }` and `int(y)` variants. Clearly typing effort is about the same, but would they provide any additional value in terms of clarity? I lean towards them being somewhat easier to read, especially for precedence. They could clearly be made available alongside the current normal cast syntax. So my question is something like this: "If C got the *additional* new forms of compound literal and cast syntax above, would you like to use them or would they offer no real benefit?" I'd really like to hear some opinions.
