Year: 2021
Author: mikaball
URL: https://www.reddit.com/r/scala/comments/n2kyop/ideas_for_a_scala_3_mapstruct_library/

When building REST services, mapping Entity Models (EM) to Data Transfer Objects (DTOs) has been an annoying problem in Java. Libs like MapStruct exist for this, but it still feels like an hack. I'm testing Scala 3 capabilities to solve this more elegantly. For instance, this works beautifully: class Record(elems: Map[String, Any]) extends Selectable: private val fields = elems def this(elems: (String, Any)*) = this(elems.toMap) def selectDynamic(name: String): Any = fields(name) infix def ::T <: Record: this.type & T = Record(fields ++ more.fields).asInstanceOf[this.type & T] object Record: def ofT <: Record*) = Record(elems.toMap).asInstanceOf[T] @main def hello = type Person = Record { val name: String; val age: Int } type Group = Record { val group: String } type Email = Record { val email: String } // assume that these values are provided from a type safe data source val person: Person = Record.of("name" -> "Alex", "age" -> 42) val group: Group = Record.of("group" -> "Admin") val email: Email = Record.of("email" -> "alex@gmail.com") val dto = person::group::email println(s"${dto.name} is ${dto.age} years old in group ${dto.group} and email ${dto.email}.") What else should I look into to proceed in this direction? More concretely. This is nice to build a DTO from different data sources, but mapping mismatched field names is also a big problem.
