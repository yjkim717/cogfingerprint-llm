Year: 2022
Author: Nuoji
URL: https://www.reddit.com/r/ProgrammingLanguages/comments/uytgwl/what_modules_should_implicitly_be_imported_in_a/

How much are we really affected by instinctive "decisions" about features that are formed by semantics of other languages we use, even if those semantics are widely different? On a Discord I asked the question above - what modules should be included implicitly without includes (for example java has `java.lang.*`) **assuming name collisions are prevented through some mechanism and no extra compile time or linking is caused by the include** (e.g. the full module path must be provided despite the import or some other scheme) The options were: 1. Nothing at all (basically freestanding) 2. The most basic stuff like `unreachable` and `bitcast` macros 3. all of (2) + basic things like memory allocators, atomics, os detection etc 4. all of (3) + commonly used math, containers, strings 5. all of (4) + remaining main parts of the standard library (but not things like graphics, hashing function and other more peripheral standard library modules) 6. all of the standard library 7. Any included library implicitly imported Now people would cluster around 1-3 for people used to C/C++, intermediates in 2-4. My personal "instinct" is to go for 1-2, but as I examine that decision, I find that there is no underlying reason for it. In C, it would be natural to use 1-2 to avoid namespace collisions. In C++ you do it more to avoid long compile times. And if I turn the problem around: how much help is it really to see `import std;` (implicitly importing the whole standard library) in every file â€“ which is likely what people will do? If there is a fair subset of the standard library that is included by default, then actual imports will reveal things for us, so if I see `import std::gfx` it tells me that there is some dependency on having a graphics environment for this library. Or `import std::crypto` would tell me it does some cryptography, which is this notorious for people using it incorrectly, so I should check how it's being used - and so on. So viewing it from a fresh angle when there's no namespacing and compile time concerns, maybe my "instincts" about imports are wrong and something like (5) is right. What do people think about built in imports in general, and are there other areas that are like imports where following what's "best" for the main languages in your domain might end up wrong for your language as it has different semantics?
